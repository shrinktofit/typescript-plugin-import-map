{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as importMapResolve from '@import-maps/resolve';\nimport fs from 'fs';\nimport ps from 'path';\nimport xFileURL from 'file-url';\nimport xFileURIToPath from 'file-uri-to-path';\n\nfunction fileURLToPath (url: string) {\n    return xFileURIToPath(url);\n}\n\nfunction pathToFileURL (path: string) {\n    return xFileURL(path, {\n        resolve: true,\n    });\n}\n\ntype ImportMapInfo = string | object;\n\ninterface Options {\n    importMap: ImportMapInfo | ImportMapInfo[];\n}\n\nconst emptyImportMap = (() => {\n    return importMapResolve.parseFromString(JSON.stringify({}, undefined, 2), '');\n})();\n\nfunction $ (modules: { typescript: typeof import(\"typescript/lib/tsserverlibrary\") }) {\n    const ts = modules.typescript;\n\n    function create (info: ts.server.PluginCreateInfo) {\n        const logInfo = (message: string) => info.project.projectService.logger.info(`[TSImportMap] ${message}`);\n        const logError = (message: string) => info.project.projectService.logger.info(`[TSImportMap] ${message}`);\n        const logVerbose = (message: string) => info.project.projectService.logger.info(`[TSImportMap] ${message}`);\n        \n        if (!(info.project instanceof ts.server.ConfiguredProject)) {\n            logInfo('The project is not a configured project.');\n            return;\n        }\n        const project = info.project as ts.server.ConfiguredProject;\n        const configureFilePath = info.project.getConfigFilePath();\n        logInfo(`Configure file path ${configureFilePath}`);\n\n        logInfo(\n            \"I'm getting set up now! Check the log for this message.\"\n        );\n\n        const parsedImportMap = readImportMap();\n\n        // Set up decorator\n        const proxy: ts.LanguageService = Object.create(null);\n        for (let k of Object.keys(info.languageService) as Array<keyof ts.LanguageService>) {\n            const x = info.languageService[k];\n            // @ts-ignore\n            proxy[k] = (...args: Array<{}>) => x.apply(info.languageService, args);\n        }\n\n        const oldFunction = info.languageServiceHost.resolveModuleNames; // Hold onto old function handle for future use.\n        info.languageServiceHost.resolveModuleNames = (\n            moduleNames: string[],\n            containingFile: string,\n            reusedNames: string[],\n            redirectedReference: ts.ResolvedProjectReference,\n            options: ts.CompilerOptions): Array<ts.ResolvedModule | undefined> => {\n                logVerbose(`Resolving [\\n${moduleNames.join('\\n')}]\\n from ${containingFile}...`);\n\n            const importMapResolveResult = moduleNames.map((moduleName): string => {\n                try {\n                    const resolvedURL = importMapResolve.resolve(moduleName, parsedImportMap, pathToFileURL(containingFile).toString());\n                    const resolvedFilePath = fileURLToPath(resolvedURL);\n                    return resolvedFilePath;\n                } catch (error) {\n                    return moduleName;\n                }\n            });\n            logVerbose(\n                `Import map resolve result: [\\n${importMapResolveResult.map((r, i) => `${moduleNames[i]} -> ${r}`).join('\\n')}\\n]`);\n\n            const oldResult = oldFunction?.call(\n                info.languageServiceHost,\n                importMapResolveResult,\n                containingFile,\n                reusedNames,\n                redirectedReference, options) ?? [];\n                logVerbose(\n                `Vender resolve result: [\\n${oldResult.map((r, i) => `${moduleNames[i]}: ${JSON.stringify(r, undefined, 2)}`).join('\\n')}\\n]`);\n\n            return oldResult;\n        };\n\n        return proxy;\n\n        function readImportMap () {\n            const options = info.config as Options;\n            const importMapInfos = Array.isArray(options.importMap) ? options.importMap : [options.importMap];\n            const parsedImportMaps: importMapResolve.ParsedImportMap[] = [];\n            for (const importMapInfo of importMapInfos) {\n                let baseURL: string;\n                let importMapSource: string;\n                if (typeof importMapInfo === 'object') {\n                    baseURL = pathToFileURL(configureFilePath);\n                    importMapSource = JSON.stringify(importMapInfo, undefined, 2);\n                } else {\n                    const importMapFile = ps.resolve(ps.dirname(configureFilePath), importMapInfo);\n                    baseURL = pathToFileURL(importMapFile).toString();\n                    importMapSource = fs.readFileSync(importMapFile, { encoding: 'utf8' });\n                }\n                let parsedImportMap: importMapResolve.ParsedImportMap | undefined;\n                try {\n                    parsedImportMap = importMapResolve.parseFromString(importMapSource, baseURL);\n                } catch (error) {\n                    logError(`Failed to parse import map <${importMapSource}> at ${fileURLToPath(baseURL)}`);\n                }\n                if (parsedImportMap) {\n                    parsedImportMaps.push(parsedImportMap);\n                }\n            }\n            if (parsedImportMaps.length === 0) {\n                logInfo(`No available import maps.`);\n                return emptyImportMap;\n            } else {\n                let result = parsedImportMaps[0];\n                for (let i = 1; i < parsedImportMaps.length; ++i) {\n                    result = importMapResolve.mergeImportMaps(result, parsedImportMaps[i]);\n                }\n                logVerbose(`The import map after parse and merge: ${JSON.stringify(result, undefined, 2)}`);\n                return result;\n            }\n        }\n    }\n\n    return { create };\n}\n\nexport = $;"]}